2023-09-01 19:49:28:079 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-09-01 19:49:28:095 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (BLOCK (ALT STRUCT_VAR) (ALT STRUCT_LET)) ID (? (BLOCK (ALT DOSPUNTOS tipo))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT (BLOCK (ALT LET) (ALT VAR)) ID IG ID (? (BLOCK (ALT l_dupla)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (BLOCK (ALT DIV) (ALT MOD) (ALT MUL))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-09-01 19:49:28:103 grammar LogManager.java:25 imported actions: []
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE GUARD (BLOCK (ALT 'guard')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE IN (BLOCK (ALT 'in')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE LET (BLOCK (ALT 'let')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE CONTINUE (BLOCK (ALT 'continue')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE COUNT (BLOCK (ALT 'count')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE ISEMPTY (BLOCK (ALT 'IsEmpty')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE APPEND (BLOCK (ALT 'append')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE REMOVE_LAST (BLOCK (ALT 'removeLast')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE REMOVE (BLOCK (ALT 'remove')))
2023-09-01 19:49:28:104 grammar LogManager.java:25 imported rule: (RULE STRUCT (BLOCK (ALT 'struct')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE STRUCT_VAR (BLOCK (ALT 'varst')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE STRUCT_LET (BLOCK (ALT 'letst')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE AT (BLOCK (ALT 'at')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE CORCHIZQ (BLOCK (ALT '[')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE CORCHDER (BLOCK (ALT ']')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE PUNTO (BLOCK (ALT '.')))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-09-01 19:49:28:105 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-09-01 19:49:28:106 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (BLOCK (ALT STRUCT_VAR) (ALT STRUCT_LET)) ID (? (BLOCK (ALT DOSPUNTOS tipo))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT (BLOCK (ALT LET) (ALT VAR)) ID IG ID (? (BLOCK (ALT l_dupla)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (BLOCK (ALT DIV) (ALT MOD) (ALT MUL))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-01 19:49:28:140 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (SET STRUCT_VAR STRUCT_LET) ID (? (BLOCK (ALT DOSPUNTOS tipo))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT (SET LET VAR) ID IG ID (? (BLOCK (ALT l_dupla)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (SET VAR LET) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (SET VAR LET) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (SET DIV MOD MUL)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-01 19:49:28:164 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (SET STRUCT_VAR STRUCT_LET) ID (? (BLOCK (ALT DOSPUNTOS tipo))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT (SET LET VAR) ID IG ID (? (BLOCK (ALT l_dupla)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (SET VAR LET) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (SET VAR LET) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (SET DIV MOD MUL)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-09-01 19:49:28:164 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-01 19:49:28:526 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=1153> expr<tokenIndex=1155> PARDER<tokenIndex=1157>                         
        | SUB<tokenIndex=1165> expr<tokenIndex=1167,p=23> 
        | NOT<tokenIndex=1175> expr<tokenIndex=1177,p=22> 
        | NUMBER<tokenIndex=1333>                                     
        | ID<tokenIndex=1341>                                         
        | STRING<tokenIndex=1349>                                     
        | (TRU<tokenIndex=1358> | FAL<tokenIndex=1362>)                                
        | NIL<tokenIndex=1371>                                        
        | accfuncstm<tokenIndex=1379>                                 
        | intstmt<tokenIndex=1387>                                    
        | floatstmt<tokenIndex=1395>                                  
        | stringstmt<tokenIndex=1403>                                 
        | accesovectorstmt<tokenIndex=1411>                           
        | countvectorstmt<tokenIndex=1419>                            
        | isemptyvectorstmt<tokenIndex=1427>                          
        | accesomatriz<tokenIndex=1435>                               
        | accesostructstmt<tokenIndex=1443>                           
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(DIV<tokenIndex=1192>|MOD<tokenIndex=1194>|MUL<tokenIndex=1196>) right=expr<tokenIndex=1201,p=22>
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(ADD<tokenIndex=1216>|SUB<tokenIndex=1218>) right=expr<tokenIndex=1223,p=21>
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MAY_IG<tokenIndex=1238>|MAYOR<tokenIndex=1240>) right=expr<tokenIndex=1245,p=20>
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MEN_IG<tokenIndex=1260>|MENOR<tokenIndex=1262>) right=expr<tokenIndex=1267,p=19>
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(IG_IG<tokenIndex=1282>|DIF<tokenIndex=1284>) right=expr<tokenIndex=1289,p=18>
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=AND<tokenIndex=1303> right=expr<tokenIndex=1307,p=17>
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=OR<tokenIndex=1321> right=expr<tokenIndex=1325,p=16>
        )*
    ;
2023-09-01 19:49:28:541 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1153))) (expr (ELEMENT_OPTIONS (= tokenIndex 1155))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1157)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 1165))) (expr (ELEMENT_OPTIONS (= tokenIndex 1167) (= p 23)))) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1175))) (expr (ELEMENT_OPTIONS (= tokenIndex 1177) (= p 22)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1333)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1341)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1349)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 1358))) (FAL (ELEMENT_OPTIONS (= tokenIndex 1362))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1371)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 1379)))) (ALT (intstmt (ELEMENT_OPTIONS (= tokenIndex 1387)))) (ALT (floatstmt (ELEMENT_OPTIONS (= tokenIndex 1395)))) (ALT (stringstmt (ELEMENT_OPTIONS (= tokenIndex 1403)))) (ALT (accesovectorstmt (ELEMENT_OPTIONS (= tokenIndex 1411)))) (ALT (countvectorstmt (ELEMENT_OPTIONS (= tokenIndex 1419)))) (ALT (isemptyvectorstmt (ELEMENT_OPTIONS (= tokenIndex 1427)))) (ALT (accesomatriz (ELEMENT_OPTIONS (= tokenIndex 1435)))) (ALT (accesostructstmt (ELEMENT_OPTIONS (= tokenIndex 1443))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (DIV (ELEMENT_OPTIONS (= tokenIndex 1192))) (MOD (ELEMENT_OPTIONS (= tokenIndex 1194))) (MUL (ELEMENT_OPTIONS (= tokenIndex 1196))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1201) (= p 22))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1216))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1218))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1223) (= p 21))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1238))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1240))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1245) (= p 20))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1260))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1262))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1267) (= p 19))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1282))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1284))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1289) (= p 18))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1303)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1307) (= p 17))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1321)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1325) (= p 16))))))))))
2023-09-01 19:49:28:545 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, FOR=13, GUARD=14, IN=15, SWITCH=16, CASE=17, DEFAULT=18, VAR=19, LET=20, BREAK=21, RETURN=22, CONTINUE=23, FUNC=24, COUNT=25, ISEMPTY=26, APPEND=27, REMOVE_LAST=28, REMOVE=29, STRUCT=30, STRUCT_VAR=31, STRUCT_LET=32, AT=33, NUMBER=34, STRING=35, ID=36, DIF=37, IG_IG=38, NOT=39, OR=40, AND=41, IG=42, MAY_IG=43, MEN_IG=44, MAYOR=45, MENOR=46, MUL=47, DIV=48, ADD=49, SUB=50, MOD=51, PARIZQ=52, PARDER=53, LLAVEIZQ=54, LLAVEDER=55, CORCHIZQ=56, CORCHDER=57, DOSPUNTOS=58, COMA=59, PTCOMA=60, INTERROGACION=61, PUNTO=62, WHITESPACE=63, COMMENT=64, LINE_COMMENT=65}
2023-09-01 19:49:28:545 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'for'=13, 'guard'=14, 'in'=15, 'switch'=16, 'case'=17, 'default'=18, 'var'=19, 'let'=20, 'break'=21, 'return'=22, 'continue'=23, 'func'=24, 'count'=25, 'IsEmpty'=26, 'append'=27, 'removeLast'=28, 'remove'=29, 'struct'=30, 'varst'=31, 'letst'=32, 'at'=33, '!='=37, '=='=38, '!'=39, '||'=40, '&&'=41, '='=42, '>='=43, '<='=44, '>'=45, '<'=46, '*'=47, '/'=48, '+'=49, '-'=50, '%'=51, '('=52, ')'=53, '{'=54, '}'=55, '['=56, ']'=57, ':'=58, ','=59, ';'=60, '?'=61, '.'=62}
2023-09-01 19:49:28:568 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-01 19:49:28:569 LL1 LogManager.java:25 look=[60, {<EOF>, 9..10, 12..14, 16..24, 30, 36, 55}]
2023-09-01 19:49:28:569 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:569 LL1 LogManager.java:25 
DECISION 1 in rule block
2023-09-01 19:49:28:569 LL1 LogManager.java:25 look=[{9..10, 12..14, 16, 19..24, 30, 36}, {<EOF>, 17..18, 55}]
2023-09-01 19:49:28:569 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:569 LL1 LogManager.java:25 
DECISION 2 in rule stmt
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[9, {19..20}, {19..20}, 19, 36, 10, 16, 12, 13, 14, 36, 24, 36, 21, 23, 22, 19, 36, 36, 36, 36, 36, 19, 36, 30, {19..20}]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 3 in rule defstructstmt
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[{31..32}, 55]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 4 in rule lista_atributos
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[58, {31..32, 42, 55}]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 5 in rule lista_atributos
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[42, {31..32, 55}]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 6 in rule struct_expr
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[36, {<EOF>, 9..10, 12..14, 16..24, 30, 36, 55, 60}]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 7 in rule l_dupla
2023-09-01 19:49:28:570 LL1 LogManager.java:25 look=[59, {<EOF>, 9..10, 12..14, 16..24, 30, 36, 55, 60}]
2023-09-01 19:49:28:570 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:570 LL1 LogManager.java:25 
DECISION 8 in rule accesostructstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[62, null]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 9 in rule defvectorstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[{1..2, 5..8, 34..36, 39, 50, 52}, 57]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 10 in rule defvectorstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[42, 42]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 11 in rule listaexpresiones
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[59, 57]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 12 in rule declmatrizstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[58, 42]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 13 in rule declmatrizstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[58, 42]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 14 in rule declmatrizstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[19, 19]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 15 in rule tipomatriz
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[56, 56]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 16 in rule listavaloresmatriz
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[59, 57]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 17 in rule listavaloresmatriz3
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[59, 57]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 18 in rule accesomatriz
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[36, 36]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 19 in rule asignmatrizstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[36, 36]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 20 in rule funcdclstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[36, 53]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 21 in rule funcdclstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[36, 53]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 22 in rule funcdclstmt
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[24, 24]
2023-09-01 19:49:28:571 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:571 LL1 LogManager.java:25 
DECISION 23 in rule accfuncstm
2023-09-01 19:49:28:571 LL1 LogManager.java:25 look=[36, 53]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 24 in rule parametros
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[59, 53]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 25 in rule parametroscall
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[59, 53]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 26 in rule ifstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[11, {<EOF>, 9..14, 16..24, 30, 36, 55, 60}]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 27 in rule ifstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..14, 16..24, 30, 36, 55, 60}]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 28 in rule switchstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[17, {18, 55}]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 29 in rule switchstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[18, 55]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? true
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 30 in rule forstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[{1..2, 5..8, 34..36, 39, 50, 52}, {1..2, 5..8, 34..36, 39, 50, 52}]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 31 in rule opasignstmt
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[36, 36]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 32 in rule expr
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[52, 50, 39, 34, 36, 35, {7..8}, 6, 36, 1, 2, 5, 36, 36, 36, 36, 36]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 33 in rule expr
2023-09-01 19:49:28:572 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-01 19:49:28:572 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:572 LL1 LogManager.java:25 
DECISION 34 in rule expr
2023-09-01 19:49:28:573 LL1 LogManager.java:25 look=[null, null]
2023-09-01 19:49:28:573 LL1 LogManager.java:25 LL(1)? false
2023-09-01 19:49:28:619 action-translator LogManager.java:25 translate 
2023-09-01 19:49:28:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-01 19:49:28:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-01 19:49:28:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-01 19:49:28:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-01 19:49:28:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-01 19:49:28:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-01 19:49:28:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-01 19:49:28:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-01 19:49:29:094 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-01 19:49:29:097 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
