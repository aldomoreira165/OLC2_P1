2023-08-27 18:54:53:666 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-08-27 18:54:53:680 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-08-27 18:54:53:686 grammar LogManager.java:25 imported actions: []
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE IN (BLOCK (ALT 'in')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE COUNT (BLOCK (ALT 'count')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE ISEMPTY (BLOCK (ALT 'IsEmpty')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE APPEND (BLOCK (ALT 'append')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE REMOVE_LAST (BLOCK (ALT 'removeLast')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE REMOVE (BLOCK (ALT 'remove')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE AT (BLOCK (ALT 'at')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE CORCHIZQ (BLOCK (ALT '[')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE CORCHDER (BLOCK (ALT ']')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-08-27 18:54:53:687 grammar LogManager.java:25 imported rule: (RULE PUNTO (BLOCK (ALT '.')))
2023-08-27 18:54:53:688 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-08-27 18:54:53:688 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-27 18:54:53:688 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-08-27 18:54:53:688 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-08-27 18:54:53:688 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-27 18:54:53:715 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-27 18:54:53:736 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-08-27 18:54:53:736 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-27 18:54:54:338 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=734> expr<tokenIndex=736> PARDER<tokenIndex=738>                         
        | SUB<tokenIndex=746> expr<tokenIndex=748,p=20> 
        | NUMBER<tokenIndex=904>                                     
        | ID<tokenIndex=912>                                         
        | STRING<tokenIndex=920>                                     
        | (TRU<tokenIndex=929> | FAL<tokenIndex=933>)                                
        | NIL<tokenIndex=942>                                        
        | accfuncstm<tokenIndex=950>                                 
        | intstmt<tokenIndex=958>                                    
        | floatstmt<tokenIndex=966>                                  
        | stringstmt<tokenIndex=974>                                 
        | accesovectorstmt<tokenIndex=982>                           
        | countvectorstmt<tokenIndex=990>                            
        | isemptyvectorstmt<tokenIndex=998>                          
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=763>|DIV<tokenIndex=765>|MOD<tokenIndex=767>) right=expr<tokenIndex=772,p=20>
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=787>|SUB<tokenIndex=789>) right=expr<tokenIndex=794,p=19>
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=809>|MAYOR<tokenIndex=811>) right=expr<tokenIndex=816,p=18>
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=831>|MENOR<tokenIndex=833>) right=expr<tokenIndex=838,p=17>
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=853>|DIF<tokenIndex=855>) right=expr<tokenIndex=860,p=16>
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=874> right=expr<tokenIndex=878,p=15>
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=892> right=expr<tokenIndex=896,p=14>
        )*
    ;
2023-08-27 18:54:54:350 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 734))) (expr (ELEMENT_OPTIONS (= tokenIndex 736))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 738)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 746))) (expr (ELEMENT_OPTIONS (= tokenIndex 748) (= p 20)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 904)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 912)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 920)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 929))) (FAL (ELEMENT_OPTIONS (= tokenIndex 933))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 942)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 950)))) (ALT (intstmt (ELEMENT_OPTIONS (= tokenIndex 958)))) (ALT (floatstmt (ELEMENT_OPTIONS (= tokenIndex 966)))) (ALT (stringstmt (ELEMENT_OPTIONS (= tokenIndex 974)))) (ALT (accesovectorstmt (ELEMENT_OPTIONS (= tokenIndex 982)))) (ALT (countvectorstmt (ELEMENT_OPTIONS (= tokenIndex 990)))) (ALT (isemptyvectorstmt (ELEMENT_OPTIONS (= tokenIndex 998))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 763))) (DIV (ELEMENT_OPTIONS (= tokenIndex 765))) (MOD (ELEMENT_OPTIONS (= tokenIndex 767))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 772) (= p 20))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 787))) (SUB (ELEMENT_OPTIONS (= tokenIndex 789))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 794) (= p 19))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 809))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 811))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 816) (= p 18))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 831))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 833))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 838) (= p 17))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 853))) (DIF (ELEMENT_OPTIONS (= tokenIndex 855))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 860) (= p 16))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 874)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 878) (= p 15))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 892)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 896) (= p 14))))))))))
2023-08-27 18:54:54:353 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, FOR=13, IN=14, SWITCH=15, CASE=16, DEFAULT=17, VAR=18, BREAK=19, RETURN=20, FUNC=21, COUNT=22, ISEMPTY=23, APPEND=24, REMOVE_LAST=25, REMOVE=26, AT=27, NUMBER=28, STRING=29, ID=30, DIF=31, IG_IG=32, NOT=33, OR=34, AND=35, IG=36, MAY_IG=37, MEN_IG=38, MAYOR=39, MENOR=40, MUL=41, DIV=42, ADD=43, SUB=44, MOD=45, PARIZQ=46, PARDER=47, LLAVEIZQ=48, LLAVEDER=49, CORCHIZQ=50, CORCHDER=51, DOSPUNTOS=52, COMA=53, PTCOMA=54, INTERROGACION=55, PUNTO=56, WHITESPACE=57, COMMENT=58, LINE_COMMENT=59}
2023-08-27 18:54:54:354 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'for'=13, 'in'=14, 'switch'=15, 'case'=16, 'default'=17, 'var'=18, 'break'=19, 'return'=20, 'func'=21, 'count'=22, 'IsEmpty'=23, 'append'=24, 'removeLast'=25, 'remove'=26, 'at'=27, '!='=31, '=='=32, '!'=33, '||'=34, '&&'=35, '='=36, '>='=37, '<='=38, '>'=39, '<'=40, '*'=41, '/'=42, '+'=43, '-'=44, '%'=45, '('=46, ')'=47, '{'=48, '}'=49, '['=50, ']'=51, ':'=52, ','=53, ';'=54, '?'=55, '.'=56}
2023-08-27 18:54:54:370 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-27 18:54:54:371 LL1 LogManager.java:25 look=[{9..10, 12..13, 15, 18..21, 30}, {<EOF>, 16..17, 49}]
2023-08-27 18:54:54:371 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:371 LL1 LogManager.java:25 
DECISION 1 in rule stmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[9, 18, 18, 18, 30, 10, 15, 12, 13, 30, 19, 21, 30, 20, 18, 30, 30, 30, 30, 30]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 2 in rule defvectorstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[{1..2, 5..8, 28..30, 44, 46}, 51]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 3 in rule defvectorstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[36, 36]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 4 in rule listaexpresiones
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[53, 51]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 5 in rule funcdclstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[30, 47]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 6 in rule funcdclstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[30, 47]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 7 in rule funcdclstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[21, 21]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 8 in rule accfuncstm
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[30, 47]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 9 in rule parametros
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[53, 47]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 10 in rule parametroscall
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[53, 47]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-08-27 18:54:54:372 LL1 LogManager.java:25 look=[11, {<EOF>, 9..13, 15..21, 30, 49}]
2023-08-27 18:54:54:372 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:372 LL1 LogManager.java:25 
DECISION 12 in rule ifstmt
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..13, 15..21, 30, 49}]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 13 in rule switchstmt
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[16, {17, 49}]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 14 in rule switchstmt
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[17, 49]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? true
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 15 in rule forstmt
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[{1..2, 5..8, 28..30, 44, 46}, {1..2, 5..8, 28..30, 44, 46}]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 16 in rule opasignstmt
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[30, 30]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[46, 44, 28, 30, 29, {7..8}, 6, 30, 1, 2, 5, 30, 30, 30]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 18 in rule expr
2023-08-27 18:54:54:373 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-27 18:54:54:373 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:373 LL1 LogManager.java:25 
DECISION 19 in rule expr
2023-08-27 18:54:54:374 LL1 LogManager.java:25 look=[null, null]
2023-08-27 18:54:54:374 LL1 LogManager.java:25 LL(1)? false
2023-08-27 18:54:54:409 action-translator LogManager.java:25 translate 
2023-08-27 18:54:54:411 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-27 18:54:54:412 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-27 18:54:54:412 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-27 18:54:54:413 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-27 18:54:54:413 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-27 18:54:54:413 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-27 18:54:54:413 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-27 18:54:54:414 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-27 18:54:54:415 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-27 18:54:54:890 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-27 18:54:54:894 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
