2023-09-03 12:22:30:931 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-09-03 12:22:30:961 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (BLOCK (ALT LET) (ALT VAR)) ID (? (BLOCK (ALT DOSPUNTOS (BLOCK (ALT tipo) (ALT ID))))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT ST (BLOCK (ALT VAR) (ALT LET)) ID (? (BLOCK (ALT DOSPUNTOS ID))) IG valor_struct_expr))) (RULE valor_struct_expr (BLOCK (ALT ST ID (? (BLOCK (ALT PARIZQ l_dupla PARDER)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (BLOCK (ALT DIV) (ALT MOD) (ALT MUL))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt) (ALT valor_struct_expr))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING) (ALT tipo_vector))) (RULE tipo_vector (BLOCK (ALT CORCHIZQ INT CORCHDER) (ALT CORCHIZQ FLOAT CORCHDER) (ALT CORCHIZQ BOOL CORCHDER) (ALT CORCHIZQ CHARACTER CORCHDER) (ALT CORCHIZQ PSTRING CORCHDER)))))
2023-09-03 12:22:30:973 grammar LogManager.java:25 imported actions: []
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE GUARD (BLOCK (ALT 'guard')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE IN (BLOCK (ALT 'in')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE LET (BLOCK (ALT 'let')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE CONTINUE (BLOCK (ALT 'continue')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE COUNT (BLOCK (ALT 'count')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE ISEMPTY (BLOCK (ALT 'IsEmpty')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE APPEND (BLOCK (ALT 'append')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE REMOVE_LAST (BLOCK (ALT 'removeLast')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE REMOVE (BLOCK (ALT 'remove')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE STRUCT (BLOCK (ALT 'struct')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE STRUCT_VAR (BLOCK (ALT 'varst')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE STRUCT_LET (BLOCK (ALT 'letst')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE AT (BLOCK (ALT 'at')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE ST (BLOCK (ALT 'st')))
2023-09-03 12:22:30:976 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE CORCHIZQ (BLOCK (ALT '[')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE CORCHDER (BLOCK (ALT ']')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE PUNTO (BLOCK (ALT '.')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE GUIONBAJO (BLOCK (ALT '_')))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-09-03 12:22:30:977 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-09-03 12:22:30:979 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (BLOCK (ALT LET) (ALT VAR)) ID (? (BLOCK (ALT DOSPUNTOS (BLOCK (ALT tipo) (ALT ID))))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT ST (BLOCK (ALT VAR) (ALT LET)) ID (? (BLOCK (ALT DOSPUNTOS ID))) IG valor_struct_expr))) (RULE valor_struct_expr (BLOCK (ALT ST ID (? (BLOCK (ALT PARIZQ l_dupla PARDER)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (BLOCK (ALT VAR) (ALT LET)) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (BLOCK (ALT DIV) (ALT MOD) (ALT MUL))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt) (ALT valor_struct_expr))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING) (ALT tipo_vector))) (RULE tipo_vector (BLOCK (ALT CORCHIZQ INT CORCHDER) (ALT CORCHIZQ FLOAT CORCHDER) (ALT CORCHIZQ BOOL CORCHDER) (ALT CORCHIZQ CHARACTER CORCHDER) (ALT CORCHIZQ PSTRING CORCHDER))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ST (BLOCK (ALT 'st'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-03 12:22:31:041 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (SET LET VAR) ID (? (BLOCK (ALT DOSPUNTOS (BLOCK (ALT tipo) (ALT ID))))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT ST (SET VAR LET) ID (? (BLOCK (ALT DOSPUNTOS ID))) IG valor_struct_expr))) (RULE valor_struct_expr (BLOCK (ALT ST ID (? (BLOCK (ALT PARIZQ l_dupla PARDER)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (SET VAR LET) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (SET VAR LET) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (SET DIV MOD MUL)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt) (ALT valor_struct_expr))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING) (ALT tipo_vector))) (RULE tipo_vector (BLOCK (ALT CORCHIZQ INT CORCHDER) (ALT CORCHIZQ FLOAT CORCHDER) (ALT CORCHIZQ BOOL CORCHDER) (ALT CORCHIZQ CHARACTER CORCHDER) (ALT CORCHIZQ PSTRING CORCHDER))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ST (BLOCK (ALT 'st'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-03 12:22:31:093 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt (? (BLOCK (ALT PTCOMA))))))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT guardstmt) (ALT opasignstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT breakstmt) (ALT continuestmt) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt) (ALT declmatrizstmt) (ALT asignmatrizstmt) (ALT defstructstmt) (ALT struct_expr))) (RULE defstructstmt (BLOCK (ALT STRUCT ID LLAVEIZQ (* (BLOCK (ALT lista_atributos))) LLAVEDER))) (RULE lista_atributos (BLOCK (ALT (SET LET VAR) ID (? (BLOCK (ALT DOSPUNTOS (BLOCK (ALT tipo) (ALT ID))))) (? (BLOCK (ALT IG expr)))))) (RULE struct_expr (BLOCK (ALT ST (SET VAR LET) ID (? (BLOCK (ALT DOSPUNTOS ID))) IG valor_struct_expr))) (RULE valor_struct_expr (BLOCK (ALT ST ID (? (BLOCK (ALT PARIZQ l_dupla PARDER)))))) (RULE l_dupla (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE accesostructstmt (BLOCK (ALT ID (+ (BLOCK (ALT PUNTO ID)))))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE declmatrizstmt (BLOCK (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz) (ALT VAR ID (? (BLOCK (ALT DOSPUNTOS tipomatriz))) IG listavaloresmatriz3))) (RULE tipomatriz (BLOCK (ALT CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER) (ALT CORCHIZQ CORCHIZQ CORCHIZQ tipo CORCHDER CORCHDER CORCHDER))) (RULE listavaloresmatriz (BLOCK (ALT CORCHIZQ CORCHIZQ listaexpresiones CORCHDER (+ (BLOCK (ALT COMA CORCHIZQ listaexpresiones CORCHDER))) CORCHDER))) (RULE listavaloresmatriz3 (BLOCK (ALT CORCHIZQ listavaloresmatriz (* (BLOCK (ALT COMA listavaloresmatriz))) CORCHDER))) (RULE accesomatriz (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER))) (RULE asignmatrizstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr) (ALT ID CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER CORCHIZQ expr CORCHDER IG expr))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE continuestmt (BLOCK (ALT CONTINUE))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT (SET VAR LET) ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT (SET VAR LET) ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE guardstmt (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT NOT expr) (ALT (= left expr) (= op (SET DIV MOD MUL)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt) (ALT accesomatriz) (ALT accesostructstmt) (ALT valor_struct_expr))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING) (ALT tipo_vector))) (RULE tipo_vector (BLOCK (ALT CORCHIZQ INT CORCHDER) (ALT CORCHIZQ FLOAT CORCHDER) (ALT CORCHIZQ BOOL CORCHDER) (ALT CORCHIZQ CHARACTER CORCHDER) (ALT CORCHIZQ PSTRING CORCHDER)))))
2023-09-03 12:22:31:094 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ST (BLOCK (ALT 'st'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-03 12:22:32:765 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=1184> expr<tokenIndex=1186> PARDER<tokenIndex=1188>                         
        | SUB<tokenIndex=1196> expr<tokenIndex=1198,p=24> 
        | NOT<tokenIndex=1206> expr<tokenIndex=1208,p=23> 
        | NUMBER<tokenIndex=1364>                                     
        | ID<tokenIndex=1372>                                         
        | STRING<tokenIndex=1380>                                     
        | (TRU<tokenIndex=1389> | FAL<tokenIndex=1393>)                                
        | NIL<tokenIndex=1402>                                        
        | accfuncstm<tokenIndex=1410>                                 
        | intstmt<tokenIndex=1418>                                    
        | floatstmt<tokenIndex=1426>                                  
        | stringstmt<tokenIndex=1434>                                 
        | accesovectorstmt<tokenIndex=1442>                           
        | countvectorstmt<tokenIndex=1450>                            
        | isemptyvectorstmt<tokenIndex=1458>                          
        | accesomatriz<tokenIndex=1466>                               
        | accesostructstmt<tokenIndex=1474>                           
        | valor_struct_expr<tokenIndex=1482>                          
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(DIV<tokenIndex=1223>|MOD<tokenIndex=1225>|MUL<tokenIndex=1227>) right=expr<tokenIndex=1232,p=23>
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(ADD<tokenIndex=1247>|SUB<tokenIndex=1249>) right=expr<tokenIndex=1254,p=22>
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MAY_IG<tokenIndex=1269>|MAYOR<tokenIndex=1271>) right=expr<tokenIndex=1276,p=21>
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MEN_IG<tokenIndex=1291>|MENOR<tokenIndex=1293>) right=expr<tokenIndex=1298,p=20>
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(IG_IG<tokenIndex=1313>|DIF<tokenIndex=1315>) right=expr<tokenIndex=1320,p=19>
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=AND<tokenIndex=1334> right=expr<tokenIndex=1338,p=18>
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=OR<tokenIndex=1352> right=expr<tokenIndex=1356,p=17>
        )*
    ;
2023-09-03 12:22:32:809 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1184))) (expr (ELEMENT_OPTIONS (= tokenIndex 1186))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1188)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 1196))) (expr (ELEMENT_OPTIONS (= tokenIndex 1198) (= p 24)))) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1206))) (expr (ELEMENT_OPTIONS (= tokenIndex 1208) (= p 23)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1364)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1372)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1380)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 1389))) (FAL (ELEMENT_OPTIONS (= tokenIndex 1393))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1402)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 1410)))) (ALT (intstmt (ELEMENT_OPTIONS (= tokenIndex 1418)))) (ALT (floatstmt (ELEMENT_OPTIONS (= tokenIndex 1426)))) (ALT (stringstmt (ELEMENT_OPTIONS (= tokenIndex 1434)))) (ALT (accesovectorstmt (ELEMENT_OPTIONS (= tokenIndex 1442)))) (ALT (countvectorstmt (ELEMENT_OPTIONS (= tokenIndex 1450)))) (ALT (isemptyvectorstmt (ELEMENT_OPTIONS (= tokenIndex 1458)))) (ALT (accesomatriz (ELEMENT_OPTIONS (= tokenIndex 1466)))) (ALT (accesostructstmt (ELEMENT_OPTIONS (= tokenIndex 1474)))) (ALT (valor_struct_expr (ELEMENT_OPTIONS (= tokenIndex 1482))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (DIV (ELEMENT_OPTIONS (= tokenIndex 1223))) (MOD (ELEMENT_OPTIONS (= tokenIndex 1225))) (MUL (ELEMENT_OPTIONS (= tokenIndex 1227))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1232) (= p 23))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1247))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1249))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1254) (= p 22))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1269))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1271))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1276) (= p 21))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1291))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1293))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1298) (= p 20))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1313))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1315))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1320) (= p 19))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1334)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1338) (= p 18))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1352)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1356) (= p 17))))))))))
2023-09-03 12:22:32:815 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, FOR=13, GUARD=14, IN=15, SWITCH=16, CASE=17, DEFAULT=18, VAR=19, LET=20, BREAK=21, RETURN=22, CONTINUE=23, FUNC=24, COUNT=25, ISEMPTY=26, APPEND=27, REMOVE_LAST=28, REMOVE=29, STRUCT=30, STRUCT_VAR=31, STRUCT_LET=32, AT=33, ST=34, NUMBER=35, STRING=36, ID=37, DIF=38, IG_IG=39, NOT=40, OR=41, AND=42, IG=43, MAY_IG=44, MEN_IG=45, MAYOR=46, MENOR=47, MUL=48, DIV=49, ADD=50, SUB=51, MOD=52, PARIZQ=53, PARDER=54, LLAVEIZQ=55, LLAVEDER=56, CORCHIZQ=57, CORCHDER=58, DOSPUNTOS=59, COMA=60, PTCOMA=61, INTERROGACION=62, PUNTO=63, GUIONBAJO=64, WHITESPACE=65, COMMENT=66, LINE_COMMENT=67}
2023-09-03 12:22:32:816 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'for'=13, 'guard'=14, 'in'=15, 'switch'=16, 'case'=17, 'default'=18, 'var'=19, 'let'=20, 'break'=21, 'return'=22, 'continue'=23, 'func'=24, 'count'=25, 'IsEmpty'=26, 'append'=27, 'removeLast'=28, 'remove'=29, 'struct'=30, 'varst'=31, 'letst'=32, 'at'=33, 'st'=34, '!='=38, '=='=39, '!'=40, '||'=41, '&&'=42, '='=43, '>='=44, '<='=45, '>'=46, '<'=47, '*'=48, '/'=49, '+'=50, '-'=51, '%'=52, '('=53, ')'=54, '{'=55, '}'=56, '['=57, ']'=58, ':'=59, ','=60, ';'=61, '?'=62, '.'=63, '_'=64}
2023-09-03 12:22:32:858 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-03 12:22:32:859 LL1 LogManager.java:25 look=[61, {<EOF>, 9..10, 12..14, 16..24, 30, 34, 37, 56}]
2023-09-03 12:22:32:860 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:860 LL1 LogManager.java:25 
DECISION 1 in rule block
2023-09-03 12:22:32:860 LL1 LogManager.java:25 look=[{9..10, 12..14, 16, 19..24, 30, 34, 37}, {<EOF>, 17..18, 56}]
2023-09-03 12:22:32:860 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:860 LL1 LogManager.java:25 
DECISION 2 in rule stmt
2023-09-03 12:22:32:860 LL1 LogManager.java:25 look=[9, {19..20}, {19..20}, 19, 37, 10, 16, 12, 13, 14, 37, 24, 37, 21, 23, 22, 19, 37, 37, 37, 37, 37, 19, 37, 30, 34]
2023-09-03 12:22:32:860 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:860 LL1 LogManager.java:25 
DECISION 3 in rule defstructstmt
2023-09-03 12:22:32:860 LL1 LogManager.java:25 look=[{19..20}, 56]
2023-09-03 12:22:32:861 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:861 LL1 LogManager.java:25 
DECISION 4 in rule lista_atributos
2023-09-03 12:22:32:861 LL1 LogManager.java:25 look=[{1..5, 57}, 37]
2023-09-03 12:22:32:861 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:861 LL1 LogManager.java:25 
DECISION 5 in rule lista_atributos
2023-09-03 12:22:32:861 LL1 LogManager.java:25 look=[59, {19..20, 43, 56}]
2023-09-03 12:22:32:861 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:861 LL1 LogManager.java:25 
DECISION 6 in rule lista_atributos
2023-09-03 12:22:32:861 LL1 LogManager.java:25 look=[43, {19..20, 56}]
2023-09-03 12:22:32:861 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:861 LL1 LogManager.java:25 
DECISION 7 in rule struct_expr
2023-09-03 12:22:32:861 LL1 LogManager.java:25 look=[59, 43]
2023-09-03 12:22:32:861 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:861 LL1 LogManager.java:25 
DECISION 8 in rule valor_struct_expr
2023-09-03 12:22:32:862 LL1 LogManager.java:25 look=[53, null]
2023-09-03 12:22:32:863 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:863 LL1 LogManager.java:25 
DECISION 9 in rule l_dupla
2023-09-03 12:22:32:863 LL1 LogManager.java:25 look=[60, 54]
2023-09-03 12:22:32:863 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:863 LL1 LogManager.java:25 
DECISION 10 in rule accesostructstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[63, null]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 11 in rule defvectorstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[{1..2, 5..8, 34..37, 40, 51, 53}, 58]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 12 in rule defvectorstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[43, 43]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 13 in rule listaexpresiones
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[60, 58]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 14 in rule declmatrizstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[59, 43]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 15 in rule declmatrizstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[59, 43]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 16 in rule declmatrizstmt
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[19, 19]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 17 in rule tipomatriz
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[57, 57]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 18 in rule listavaloresmatriz
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[60, 58]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 19 in rule listavaloresmatriz3
2023-09-03 12:22:32:864 LL1 LogManager.java:25 look=[60, 58]
2023-09-03 12:22:32:864 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:864 LL1 LogManager.java:25 
DECISION 20 in rule accesomatriz
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[37, 37]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 21 in rule asignmatrizstmt
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[37, 37]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 22 in rule funcdclstmt
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[37, 54]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 23 in rule funcdclstmt
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[37, 54]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 24 in rule funcdclstmt
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[24, 24]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 25 in rule accfuncstm
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[37, 54]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 26 in rule parametros
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[60, 54]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 27 in rule parametroscall
2023-09-03 12:22:32:865 LL1 LogManager.java:25 look=[60, 54]
2023-09-03 12:22:32:865 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:865 LL1 LogManager.java:25 
DECISION 28 in rule ifstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[11, {<EOF>, 9..14, 16..24, 30, 34, 37, 56, 61}]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 29 in rule ifstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..14, 16..24, 30, 34, 37, 56, 61}]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 30 in rule switchstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[17, {18, 56}]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 31 in rule switchstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[18, 56]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 32 in rule forstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[{1..2, 5..8, 34..37, 40, 51, 53}, {1..2, 5..8, 34..37, 40, 51, 53}]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 33 in rule opasignstmt
2023-09-03 12:22:32:866 LL1 LogManager.java:25 look=[37, 37]
2023-09-03 12:22:32:866 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:866 LL1 LogManager.java:25 
DECISION 34 in rule expr
2023-09-03 12:22:32:867 LL1 LogManager.java:25 look=[53, 51, 40, 35, 37, 36, {7..8}, 6, 37, 1, 2, 5, 37, 37, 37, 37, 37, 34]
2023-09-03 12:22:32:867 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:867 LL1 LogManager.java:25 
DECISION 35 in rule expr
2023-09-03 12:22:32:867 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-03 12:22:32:867 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:867 LL1 LogManager.java:25 
DECISION 36 in rule expr
2023-09-03 12:22:32:867 LL1 LogManager.java:25 look=[null, null]
2023-09-03 12:22:32:867 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:867 LL1 LogManager.java:25 
DECISION 37 in rule tipo
2023-09-03 12:22:32:867 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 57]
2023-09-03 12:22:32:867 LL1 LogManager.java:25 LL(1)? true
2023-09-03 12:22:32:867 LL1 LogManager.java:25 
DECISION 38 in rule tipo_vector
2023-09-03 12:22:32:867 LL1 LogManager.java:25 look=[57, 57, 57, 57, 57]
2023-09-03 12:22:32:867 LL1 LogManager.java:25 LL(1)? false
2023-09-03 12:22:32:954 action-translator LogManager.java:25 translate 
2023-09-03 12:22:32:957 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-03 12:22:32:958 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-03 12:22:32:958 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-03 12:22:32:958 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-03 12:22:32:959 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-03 12:22:32:959 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 12:22:32:960 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 12:22:32:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-03 12:22:32:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-03 12:22:32:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-03 12:22:32:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-03 12:22:32:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-03 12:22:32:962 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 12:22:32:962 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 12:22:34:158 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ST (BLOCK (ALT 'st'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-03 12:22:34:162 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE STRUCT_VAR (BLOCK (ALT 'varst'))) (RULE STRUCT_LET (BLOCK (ALT 'letst'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ST (BLOCK (ALT 'st'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
