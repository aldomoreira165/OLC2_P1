2023-08-24 22:05:13:890 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-08-24 22:05:13:904 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-08-24 22:05:13:909 grammar LogManager.java:25 imported actions: []
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-08-24 22:05:13:910 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-08-24 22:05:13:911 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-08-24 22:05:13:911 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 22:05:13:935 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 22:05:13:955 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-08-24 22:05:13:956 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 22:05:14:557 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=444> expr<tokenIndex=446> PARDER<tokenIndex=448>                         
        | SUB<tokenIndex=456> expr<tokenIndex=458,p=14> 
        | NUMBER<tokenIndex=614>                                     
        | ID<tokenIndex=622>                                         
        | STRING<tokenIndex=630>                                     
        | (TRU<tokenIndex=639> | FAL<tokenIndex=643>)                                
        | NIL<tokenIndex=652>                                        
        | accfuncstm<tokenIndex=660>                                 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MUL<tokenIndex=473>|DIV<tokenIndex=475>|MOD<tokenIndex=477>) right=expr<tokenIndex=482,p=14>
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(ADD<tokenIndex=497>|SUB<tokenIndex=499>) right=expr<tokenIndex=504,p=13>
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MAY_IG<tokenIndex=519>|MAYOR<tokenIndex=521>) right=expr<tokenIndex=526,p=12>
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MEN_IG<tokenIndex=541>|MENOR<tokenIndex=543>) right=expr<tokenIndex=548,p=11>
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(IG_IG<tokenIndex=563>|DIF<tokenIndex=565>) right=expr<tokenIndex=570,p=10>
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=AND<tokenIndex=584> right=expr<tokenIndex=588,p=9>
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> op=OR<tokenIndex=602> right=expr<tokenIndex=606,p=8>
        )*
    ;
2023-08-24 22:05:14:566 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 444))) (expr (ELEMENT_OPTIONS (= tokenIndex 446))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 448)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 456))) (expr (ELEMENT_OPTIONS (= tokenIndex 458) (= p 14)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 614)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 622)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 630)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 639))) (FAL (ELEMENT_OPTIONS (= tokenIndex 643))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 652)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 660))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 473))) (DIV (ELEMENT_OPTIONS (= tokenIndex 475))) (MOD (ELEMENT_OPTIONS (= tokenIndex 477))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 482) (= p 14))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 497))) (SUB (ELEMENT_OPTIONS (= tokenIndex 499))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 504) (= p 13))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 519))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 521))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 526) (= p 12))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 541))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 543))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 548) (= p 11))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 563))) (DIF (ELEMENT_OPTIONS (= tokenIndex 565))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 570) (= p 10))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 584)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 588) (= p 9))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 602)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 606) (= p 8))))))))))
2023-08-24 22:05:14:568 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, SWITCH=13, CASE=14, DEFAULT=15, VAR=16, BREAK=17, RETURN=18, FUNC=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, MAY_IG=29, MEN_IG=30, MAYOR=31, MENOR=32, MUL=33, DIV=34, ADD=35, SUB=36, MOD=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, DOSPUNTOS=42, COMA=43, PTCOMA=44, INTERROGACION=45, WHITESPACE=46, COMMENT=47, LINE_COMMENT=48}
2023-08-24 22:05:14:568 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'switch'=13, 'case'=14, 'default'=15, 'var'=16, 'break'=17, 'return'=18, 'func'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '>='=29, '<='=30, '>'=31, '<'=32, '*'=33, '/'=34, '+'=35, '-'=36, '%'=37, '('=38, ')'=39, '{'=40, '}'=41, ':'=42, ','=43, ';'=44, '?'=45}
2023-08-24 22:05:14:582 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-24 22:05:14:582 LL1 LogManager.java:25 look=[{9..10, 12..13, 16..19, 22}, {<EOF>, 14..15, 41}]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 1 in rule stmt
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[9, 16, 16, 16, 22, 10, 13, 12, 22, 17, 19, 22, 18]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 2 in rule funcdclstmt
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[22, 39]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 3 in rule funcdclstmt
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[22, 39]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 4 in rule funcdclstmt
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[19, 19]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 5 in rule accfuncstm
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[22, 39]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 6 in rule parametros
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[43, 39]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 7 in rule parametroscall
2023-08-24 22:05:14:583 LL1 LogManager.java:25 look=[43, 39]
2023-08-24 22:05:14:583 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:583 LL1 LogManager.java:25 
DECISION 8 in rule ifstmt
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[11, {<EOF>, 9..19, 22, 41}]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 9 in rule ifstmt
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..19, 22, 41}]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 10 in rule switchstmt
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[14, {15, 41}]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 11 in rule switchstmt
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[15, 41]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? true
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 12 in rule opasignstmt
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[22, 22]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 13 in rule expr
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[38, 36, 20, 22, 21, {7..8}, 6, 22]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:584 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-08-24 22:05:14:584 LL1 LogManager.java:25 look=[null, null]
2023-08-24 22:05:14:584 LL1 LogManager.java:25 LL(1)? false
2023-08-24 22:05:14:613 action-translator LogManager.java:25 translate 
2023-08-24 22:05:14:614 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 22:05:14:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 22:05:14:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 22:05:14:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 22:05:14:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 22:05:14:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 22:05:14:616 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 22:05:14:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-24 22:05:14:977 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 22:05:14:980 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
