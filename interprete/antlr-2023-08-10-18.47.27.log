2023-08-10 18:47:26:901 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-08-10 18:47:26:914 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT whilestmt))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE expr (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT primitivo))) (RULE primitivo (BLOCK (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-08-10 18:47:26:918 grammar LogManager.java:25 imported actions: []
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-08-10 18:47:26:920 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-08-10 18:47:26:921 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT whilestmt))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE expr (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT primitivo))) (RULE primitivo (BLOCK (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-10 18:47:26:942 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT whilestmt))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE expr (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT primitivo))) (RULE primitivo (BLOCK (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-10 18:47:26:962 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT whilestmt))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE expr (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT primitivo))) (RULE primitivo (BLOCK (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-08-10 18:47:26:962 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-10 18:47:27:345 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=311> expr<tokenIndex=313> PARDER<tokenIndex=315>                         
        | primitivo<tokenIndex=323>                                  
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MUL<tokenIndex=176>|DIV<tokenIndex=178>) right=expr<tokenIndex=183,p=10>
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=(ADD<tokenIndex=198>|SUB<tokenIndex=200>) right=expr<tokenIndex=205,p=9>
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> op=(MAY_IG<tokenIndex=220>|MAYOR<tokenIndex=222>) right=expr<tokenIndex=227,p=8>
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> op=(MEN_IG<tokenIndex=242>|MENOR<tokenIndex=244>) right=expr<tokenIndex=249,p=7>
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=(IG_IG<tokenIndex=264>|DIF<tokenIndex=266>) right=expr<tokenIndex=271,p=6>
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> AND<tokenIndex=283> right=expr<tokenIndex=287,p=5>
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> OR<tokenIndex=299> right=expr<tokenIndex=303,p=4>
        )*
    ;
2023-08-10 18:47:27:355 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 311))) (expr (ELEMENT_OPTIONS (= tokenIndex 313))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 315)))) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 323))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 176))) (DIV (ELEMENT_OPTIONS (= tokenIndex 178))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 183) (= p 10))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 198))) (SUB (ELEMENT_OPTIONS (= tokenIndex 200))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 205) (= p 9))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 220))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 222))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 227) (= p 8))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 242))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 244))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 249) (= p 7))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 264))) (DIF (ELEMENT_OPTIONS (= tokenIndex 266))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 271) (= p 6))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (AND (ELEMENT_OPTIONS (= tokenIndex 283))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 287) (= p 5))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (OR (ELEMENT_OPTIONS (= tokenIndex 299))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 303) (= p 4))))))))))
2023-08-10 18:47:27:357 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, TRU=6, FAL=7, PRINT=8, IF=9, ELSE=10, WHILE=11, VAR=12, NUMBER=13, STRING=14, ID=15, DIF=16, IG_IG=17, NOT=18, OR=19, AND=20, IG=21, MAY_IG=22, MEN_IG=23, MAYOR=24, MENOR=25, MUL=26, DIV=27, ADD=28, SUB=29, PARIZQ=30, PARDER=31, LLAVEIZQ=32, LLAVEDER=33, DOSPUNTOS=34, INTERROGACION=35, WHITESPACE=36, COMMENT=37, LINE_COMMENT=38}
2023-08-10 18:47:27:357 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'true'=6, 'false'=7, 'print'=8, 'if'=9, 'else'=10, 'while'=11, 'var'=12, '!='=16, '=='=17, '!'=18, '||'=19, '&&'=20, '='=21, '>='=22, '<='=23, '>'=24, '<'=25, '*'=26, '/'=27, '+'=28, '-'=29, '('=30, ')'=31, '{'=32, '}'=33, ':'=34, '?'=35}
2023-08-10 18:47:27:369 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-10 18:47:27:370 LL1 LogManager.java:25 look=[{8..9, 11..12, 15}, {<EOF>, 33}]
2023-08-10 18:47:27:370 LL1 LogManager.java:25 LL(1)? true
2023-08-10 18:47:27:370 LL1 LogManager.java:25 
DECISION 1 in rule stmt
2023-08-10 18:47:27:370 LL1 LogManager.java:25 look=[8, 12, 12, 12, 15, 9, 11]
2023-08-10 18:47:27:370 LL1 LogManager.java:25 LL(1)? false
2023-08-10 18:47:27:370 LL1 LogManager.java:25 
DECISION 2 in rule expr
2023-08-10 18:47:27:371 LL1 LogManager.java:25 look=[30, {6..7, 13..15}]
2023-08-10 18:47:27:371 LL1 LogManager.java:25 LL(1)? true
2023-08-10 18:47:27:371 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-10 18:47:27:371 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-10 18:47:27:371 LL1 LogManager.java:25 LL(1)? false
2023-08-10 18:47:27:371 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-10 18:47:27:371 LL1 LogManager.java:25 look=[null, null]
2023-08-10 18:47:27:371 LL1 LogManager.java:25 LL(1)? false
2023-08-10 18:47:27:371 LL1 LogManager.java:25 
DECISION 5 in rule primitivo
2023-08-10 18:47:27:371 LL1 LogManager.java:25 look=[13, 15, 14, {6..7}]
2023-08-10 18:47:27:371 LL1 LogManager.java:25 LL(1)? true
2023-08-10 18:47:27:394 action-translator LogManager.java:25 translate 
2023-08-10 18:47:27:395 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-10 18:47:27:396 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-10 18:47:27:396 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-10 18:47:27:396 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-10 18:47:27:397 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-08-10 18:47:27:397 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-08-10 18:47:27:397 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-08-10 18:47:27:399 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-08-10 18:47:27:728 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-10 18:47:27:730 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
