2023-08-26 18:09:38:009 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-08-26 18:09:38:023 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN RANGE (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported actions: []
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE FOR (BLOCK (ALT 'for')))
2023-08-26 18:09:38:029 grammar LogManager.java:25 imported rule: (RULE IN (BLOCK (ALT 'in')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE RANGE (BLOCK (ALT 'range')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE COUNT (BLOCK (ALT 'count')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE ISEMPTY (BLOCK (ALT 'IsEmpty')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE APPEND (BLOCK (ALT 'append')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE REMOVE_LAST (BLOCK (ALT 'removeLast')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE REMOVE (BLOCK (ALT 'remove')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE AT (BLOCK (ALT 'at')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE CORCHIZQ (BLOCK (ALT '[')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE CORCHDER (BLOCK (ALT ']')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE PUNTO (BLOCK (ALT '.')))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-08-26 18:09:38:030 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-08-26 18:09:38:031 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN RANGE (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 18:09:38:056 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN RANGE (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 18:09:38:078 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT forstmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt) (ALT appendvectorstmt) (ALT removelastvectorstmt) (ALT removeatvectorstmt) (ALT asignvectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ (? (BLOCK (ALT listaexpresiones))) CORCHDER) (ALT IG ID))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE asignvectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER IG expr))) (RULE appendvectorstmt (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER))) (RULE removeatvectorstmt (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT DOSPUNTOS expr PARDER))) (RULE removelastvectorstmt (BLOCK (ALT ID PUNTO REMOVE_LAST PARIZQ PARDER))) (RULE countvectorstmt (BLOCK (ALT ID PUNTO COUNT))) (RULE isemptyvectorstmt (BLOCK (ALT ID PUNTO ISEMPTY))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE forstmt (BLOCK (ALT FOR ID IN RANGE (BLOCK (ALT expr) (ALT rangostmt)) LLAVEIZQ block LLAVEDER))) (RULE rangostmt (BLOCK (ALT expr PUNTO PUNTO PUNTO expr))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt) (ALT countvectorstmt) (ALT isemptyvectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-08-26 18:09:38:079 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 18:09:38:449 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=736> expr<tokenIndex=738> PARDER<tokenIndex=740>                         
        | SUB<tokenIndex=748> expr<tokenIndex=750,p=20> 
        | NUMBER<tokenIndex=906>                                     
        | ID<tokenIndex=914>                                         
        | STRING<tokenIndex=922>                                     
        | (TRU<tokenIndex=931> | FAL<tokenIndex=935>)                                
        | NIL<tokenIndex=944>                                        
        | accfuncstm<tokenIndex=952>                                 
        | intstmt<tokenIndex=960>                                    
        | floatstmt<tokenIndex=968>                                  
        | stringstmt<tokenIndex=976>                                 
        | accesovectorstmt<tokenIndex=984>                           
        | countvectorstmt<tokenIndex=992>                            
        | isemptyvectorstmt<tokenIndex=1000>                          
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=765>|DIV<tokenIndex=767>|MOD<tokenIndex=769>) right=expr<tokenIndex=774,p=20>
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=789>|SUB<tokenIndex=791>) right=expr<tokenIndex=796,p=19>
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=811>|MAYOR<tokenIndex=813>) right=expr<tokenIndex=818,p=18>
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=833>|MENOR<tokenIndex=835>) right=expr<tokenIndex=840,p=17>
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=855>|DIF<tokenIndex=857>) right=expr<tokenIndex=862,p=16>
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=876> right=expr<tokenIndex=880,p=15>
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=894> right=expr<tokenIndex=898,p=14>
        )*
    ;
2023-08-26 18:09:38:459 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 736))) (expr (ELEMENT_OPTIONS (= tokenIndex 738))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 740)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 748))) (expr (ELEMENT_OPTIONS (= tokenIndex 750) (= p 20)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 906)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 914)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 922)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 931))) (FAL (ELEMENT_OPTIONS (= tokenIndex 935))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 944)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 952)))) (ALT (intstmt (ELEMENT_OPTIONS (= tokenIndex 960)))) (ALT (floatstmt (ELEMENT_OPTIONS (= tokenIndex 968)))) (ALT (stringstmt (ELEMENT_OPTIONS (= tokenIndex 976)))) (ALT (accesovectorstmt (ELEMENT_OPTIONS (= tokenIndex 984)))) (ALT (countvectorstmt (ELEMENT_OPTIONS (= tokenIndex 992)))) (ALT (isemptyvectorstmt (ELEMENT_OPTIONS (= tokenIndex 1000))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 765))) (DIV (ELEMENT_OPTIONS (= tokenIndex 767))) (MOD (ELEMENT_OPTIONS (= tokenIndex 769))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 774) (= p 20))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 789))) (SUB (ELEMENT_OPTIONS (= tokenIndex 791))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 796) (= p 19))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 811))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 813))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 818) (= p 18))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 833))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 835))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 840) (= p 17))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 855))) (DIF (ELEMENT_OPTIONS (= tokenIndex 857))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 862) (= p 16))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 876)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 880) (= p 15))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 894)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 898) (= p 14))))))))))
2023-08-26 18:09:38:461 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, FOR=13, IN=14, RANGE=15, SWITCH=16, CASE=17, DEFAULT=18, VAR=19, BREAK=20, RETURN=21, FUNC=22, COUNT=23, ISEMPTY=24, APPEND=25, REMOVE_LAST=26, REMOVE=27, AT=28, NUMBER=29, STRING=30, ID=31, DIF=32, IG_IG=33, NOT=34, OR=35, AND=36, IG=37, MAY_IG=38, MEN_IG=39, MAYOR=40, MENOR=41, MUL=42, DIV=43, ADD=44, SUB=45, MOD=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, CORCHIZQ=51, CORCHDER=52, DOSPUNTOS=53, COMA=54, PTCOMA=55, INTERROGACION=56, PUNTO=57, WHITESPACE=58, COMMENT=59, LINE_COMMENT=60}
2023-08-26 18:09:38:462 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'for'=13, 'in'=14, 'range'=15, 'switch'=16, 'case'=17, 'default'=18, 'var'=19, 'break'=20, 'return'=21, 'func'=22, 'count'=23, 'IsEmpty'=24, 'append'=25, 'removeLast'=26, 'remove'=27, 'at'=28, '!='=32, '=='=33, '!'=34, '||'=35, '&&'=36, '='=37, '>='=38, '<='=39, '>'=40, '<'=41, '*'=42, '/'=43, '+'=44, '-'=45, '%'=46, '('=47, ')'=48, '{'=49, '}'=50, '['=51, ']'=52, ':'=53, ','=54, ';'=55, '?'=56, '.'=57}
2023-08-26 18:09:38:479 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-26 18:09:38:479 LL1 LogManager.java:25 look=[{9..10, 12..13, 16, 19..22, 31}, {<EOF>, 17..18, 50}]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 1 in rule stmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[9, 19, 19, 19, 31, 10, 16, 12, 13, 31, 20, 22, 31, 21, 19, 31, 31, 31, 31, 31]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 2 in rule defvectorstmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[{1..2, 5..8, 29..31, 45, 47}, 52]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 3 in rule defvectorstmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[37, 37]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 4 in rule listaexpresiones
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[54, 52]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 5 in rule funcdclstmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[31, 48]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 6 in rule funcdclstmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[31, 48]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 7 in rule funcdclstmt
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[22, 22]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 8 in rule accfuncstm
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[31, 48]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 9 in rule parametros
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[54, 48]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 10 in rule parametroscall
2023-08-26 18:09:38:480 LL1 LogManager.java:25 look=[54, 48]
2023-08-26 18:09:38:480 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:480 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[11, {<EOF>, 9..13, 16..22, 31, 50}]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 12 in rule ifstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..13, 16..22, 31, 50}]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 13 in rule switchstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[17, {18, 50}]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 14 in rule switchstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[18, 50]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? true
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 15 in rule forstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[{1..2, 5..8, 29..31, 45, 47}, {1..2, 5..8, 29..31, 45, 47}]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 16 in rule opasignstmt
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[31, 31]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[47, 45, 29, 31, 30, {7..8}, 6, 31, 1, 2, 5, 31, 31, 31]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 18 in rule expr
2023-08-26 18:09:38:481 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-26 18:09:38:481 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:481 LL1 LogManager.java:25 
DECISION 19 in rule expr
2023-08-26 18:09:38:482 LL1 LogManager.java:25 look=[null, null]
2023-08-26 18:09:38:482 LL1 LogManager.java:25 LL(1)? false
2023-08-26 18:09:38:517 action-translator LogManager.java:25 translate 
2023-08-26 18:09:38:518 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-26 18:09:38:519 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-26 18:09:38:519 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-26 18:09:38:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 18:09:38:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 18:09:38:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 18:09:38:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 18:09:38:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 18:09:39:036 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 18:09:39:040 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE_LAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
