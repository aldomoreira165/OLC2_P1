2023-08-26 11:33:01:388 grammar LogManager.java:25 load SwiftLexer from SwiftGrammar.g4
2023-08-26 11:33:01:404 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ listaexpresiones CORCHDER))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING)))))
2023-08-26 11:33:01:409 grammar LogManager.java:25 imported actions: []
2023-08-26 11:33:01:410 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT 'int')))
2023-08-26 11:33:01:410 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT 'float')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE BOOL (BLOCK (ALT 'bool')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT 'character')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE PSTRING (BLOCK (ALT 'String')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE NIL (BLOCK (ALT 'nil')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE TRU (BLOCK (ALT 'true')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE FAL (BLOCK (ALT 'false')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'print')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE SWITCH (BLOCK (ALT 'switch')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE CASE (BLOCK (ALT 'case')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE DEFAULT (BLOCK (ALT 'default')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE VAR (BLOCK (ALT 'var')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE BREAK (BLOCK (ALT 'break')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE RETURN (BLOCK (ALT 'return')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE FUNC (BLOCK (ALT 'func')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9])))))))))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE DIF (BLOCK (ALT '!=')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE IG_IG (BLOCK (ALT '==')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE NOT (BLOCK (ALT '!')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE OR (BLOCK (ALT '||')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE AND (BLOCK (ALT '&&')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE IG (BLOCK (ALT '=')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MAY_IG (BLOCK (ALT '>=')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MEN_IG (BLOCK (ALT '<=')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MAYOR (BLOCK (ALT '>')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MENOR (BLOCK (ALT '<')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE MOD (BLOCK (ALT '%')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE PARIZQ (BLOCK (ALT '(')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE PARDER (BLOCK (ALT ')')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE LLAVEIZQ (BLOCK (ALT '{')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE LLAVEDER (BLOCK (ALT '}')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE CORCHIZQ (BLOCK (ALT '[')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE CORCHDER (BLOCK (ALT ']')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE DOSPUNTOS (BLOCK (ALT ':')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE COMA (BLOCK (ALT ',')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE PTCOMA (BLOCK (ALT ';')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE INTERROGACION (BLOCK (ALT '?')))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip)))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2023-08-26 11:33:01:411 grammar LogManager.java:25 imported rule: (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))
2023-08-26 11:33:01:412 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ listaexpresiones CORCHDER))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (BLOCK (ALT TRU) (ALT FAL))) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt))) (RULE tipo (BLOCK (ALT INT) (ALT FLOAT) (ALT BOOL) (ALT CHARACTER) (ALT PSTRING))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 11:33:01:436 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ listaexpresiones CORCHDER))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING)))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 11:33:01:456 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (import SwiftLexer) (RULES (RULE s (BLOCK (ALT block EOF))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stmt)))))) (RULE stmt (BLOCK (ALT printstmt) (ALT typedDeclstmt) (ALT untypedDeclstmt) (ALT optionalTypedDeclstmt) (ALT asignstmt) (ALT ifstmt) (ALT switchstmt) (ALT whilestmt) (ALT opasignstmt) (ALT breakstmt) (ALT funcdclstmt) (ALT accfuncstm) (ALT returnstmt) (ALT declvectorstmt) (ALT accesovectorstmt))) (RULE declvectorstmt (BLOCK (ALT VAR ID DOSPUNTOS CORCHIZQ tipo CORCHDER defvectorstmt))) (RULE defvectorstmt (BLOCK (ALT IG CORCHIZQ listaexpresiones CORCHDER))) (RULE listaexpresiones (BLOCK (ALT expr (* (BLOCK (ALT COMA expr)))))) (RULE accesovectorstmt (BLOCK (ALT ID CORCHIZQ expr CORCHDER))) (RULE returnstmt (BLOCK (ALT RETURN expr PTCOMA))) (RULE printstmt (BLOCK (ALT PRINT PARIZQ expr PARDER))) (RULE intstmt (BLOCK (ALT INT PARIZQ expr PARDER))) (RULE floatstmt (BLOCK (ALT FLOAT PARIZQ expr PARDER))) (RULE stringstmt (BLOCK (ALT PSTRING PARIZQ expr PARDER))) (RULE funcdclstmt (BLOCK (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER LLAVEIZQ block LLAVEDER) (ALT FUNC ID PARIZQ (? (BLOCK (ALT parametros))) PARDER SUB MAYOR tipo LLAVEIZQ block LLAVEDER))) (RULE accfuncstm (BLOCK (ALT ID PARIZQ (? (BLOCK (ALT parametroscall))) PARDER))) (RULE parametros (BLOCK (ALT ID ID DOSPUNTOS tipo (* (BLOCK (ALT COMA ID ID DOSPUNTOS tipo)))))) (RULE parametroscall (BLOCK (ALT ID DOSPUNTOS expr (* (BLOCK (ALT COMA ID DOSPUNTOS expr)))))) (RULE breakstmt (BLOCK (ALT BREAK))) (RULE ifstmt (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER (* (BLOCK (ALT elseifstmt))) (? (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER)))))) (RULE elseifstmt (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER))) (RULE switchstmt (BLOCK (ALT SWITCH expr LLAVEIZQ (+ (BLOCK (ALT caseStmt))) (? (BLOCK (ALT defaultCase))) LLAVEDER))) (RULE caseStmt (BLOCK (ALT CASE expr DOSPUNTOS block))) (RULE defaultCase (BLOCK (ALT DEFAULT DOSPUNTOS block))) (RULE typedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo IG expr))) (RULE untypedDeclstmt (BLOCK (ALT VAR ID IG expr))) (RULE optionalTypedDeclstmt (BLOCK (ALT VAR ID DOSPUNTOS tipo INTERROGACION))) (RULE asignstmt (BLOCK (ALT ID IG expr))) (RULE whilestmt (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER))) (RULE opasignstmt (BLOCK (ALT ID ADD IG expr) (ALT ID SUB IG expr))) (RULE expr (BLOCK (ALT PARIZQ expr PARDER) (ALT SUB expr) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr)) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) (= op AND) (= right expr)) (ALT (= left expr) (= op OR) (= right expr)) (ALT NUMBER) (ALT ID) (ALT STRING) (ALT (SET TRU FAL)) (ALT NIL) (ALT accfuncstm) (ALT intstmt) (ALT floatstmt) (ALT stringstmt) (ALT accesovectorstmt))) (RULE tipo (BLOCK (ALT (SET INT FLOAT BOOL CHARACTER PSTRING))))))
2023-08-26 11:33:01:456 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 11:33:01:777 left-recursion LogManager.java:25 expr
    :   ( {} PARIZQ<tokenIndex=563> expr<tokenIndex=565> PARDER<tokenIndex=567>                         
        | SUB<tokenIndex=575> expr<tokenIndex=577,p=18> 
        | NUMBER<tokenIndex=733>                                     
        | ID<tokenIndex=741>                                         
        | STRING<tokenIndex=749>                                     
        | (TRU<tokenIndex=758> | FAL<tokenIndex=762>)                                
        | NIL<tokenIndex=771>                                        
        | accfuncstm<tokenIndex=779>                                 
        | intstmt<tokenIndex=787>                                    
        | floatstmt<tokenIndex=795>                                  
        | stringstmt<tokenIndex=803>                                 
        | accesovectorstmt<tokenIndex=811>                           
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MUL<tokenIndex=592>|DIV<tokenIndex=594>|MOD<tokenIndex=596>) right=expr<tokenIndex=601,p=18>
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(ADD<tokenIndex=616>|SUB<tokenIndex=618>) right=expr<tokenIndex=623,p=17>
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MAY_IG<tokenIndex=638>|MAYOR<tokenIndex=640>) right=expr<tokenIndex=645,p=16>
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MEN_IG<tokenIndex=660>|MENOR<tokenIndex=662>) right=expr<tokenIndex=667,p=15>
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(IG_IG<tokenIndex=682>|DIF<tokenIndex=684>) right=expr<tokenIndex=689,p=14>
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=703> right=expr<tokenIndex=707,p=13>
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=721> right=expr<tokenIndex=725,p=12>
        )*
    ;
2023-08-26 11:33:01:788 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 563))) (expr (ELEMENT_OPTIONS (= tokenIndex 565))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 567)))) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 575))) (expr (ELEMENT_OPTIONS (= tokenIndex 577) (= p 18)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 733)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 741)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 749)))) (ALT (SET (TRU (ELEMENT_OPTIONS (= tokenIndex 758))) (FAL (ELEMENT_OPTIONS (= tokenIndex 762))))) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 771)))) (ALT (accfuncstm (ELEMENT_OPTIONS (= tokenIndex 779)))) (ALT (intstmt (ELEMENT_OPTIONS (= tokenIndex 787)))) (ALT (floatstmt (ELEMENT_OPTIONS (= tokenIndex 795)))) (ALT (stringstmt (ELEMENT_OPTIONS (= tokenIndex 803)))) (ALT (accesovectorstmt (ELEMENT_OPTIONS (= tokenIndex 811))))) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 592))) (DIV (ELEMENT_OPTIONS (= tokenIndex 594))) (MOD (ELEMENT_OPTIONS (= tokenIndex 596))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 601) (= p 18))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 616))) (SUB (ELEMENT_OPTIONS (= tokenIndex 618))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 623) (= p 17))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 638))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 640))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 645) (= p 16))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 660))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 662))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 667) (= p 15))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 682))) (DIF (ELEMENT_OPTIONS (= tokenIndex 684))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 689) (= p 14))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 703)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 707) (= p 13))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 721)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 725) (= p 12))))))))))
2023-08-26 11:33:01:790 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHARACTER=4, PSTRING=5, NIL=6, TRU=7, FAL=8, PRINT=9, IF=10, ELSE=11, WHILE=12, SWITCH=13, CASE=14, DEFAULT=15, VAR=16, BREAK=17, RETURN=18, FUNC=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, MAY_IG=29, MEN_IG=30, MAYOR=31, MENOR=32, MUL=33, DIV=34, ADD=35, SUB=36, MOD=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, CORCHIZQ=42, CORCHDER=43, DOSPUNTOS=44, COMA=45, PTCOMA=46, INTERROGACION=47, WHITESPACE=48, COMMENT=49, LINE_COMMENT=50}
2023-08-26 11:33:01:790 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'character'=4, 'String'=5, 'nil'=6, 'true'=7, 'false'=8, 'print'=9, 'if'=10, 'else'=11, 'while'=12, 'switch'=13, 'case'=14, 'default'=15, 'var'=16, 'break'=17, 'return'=18, 'func'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '>='=29, '<='=30, '>'=31, '<'=32, '*'=33, '/'=34, '+'=35, '-'=36, '%'=37, '('=38, ')'=39, '{'=40, '}'=41, '['=42, ']'=43, ':'=44, ','=45, ';'=46, '?'=47}
2023-08-26 11:33:01:806 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-26 11:33:01:807 LL1 LogManager.java:25 look=[{9..10, 12..13, 16..19, 22}, {<EOF>, 14..15, 41}]
2023-08-26 11:33:01:807 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:807 LL1 LogManager.java:25 
DECISION 1 in rule stmt
2023-08-26 11:33:01:807 LL1 LogManager.java:25 look=[9, 16, 16, 16, 22, 10, 13, 12, 22, 17, 19, 22, 18, 16, 22]
2023-08-26 11:33:01:807 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:807 LL1 LogManager.java:25 
DECISION 2 in rule listaexpresiones
2023-08-26 11:33:01:807 LL1 LogManager.java:25 look=[45, 43]
2023-08-26 11:33:01:807 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:807 LL1 LogManager.java:25 
DECISION 3 in rule funcdclstmt
2023-08-26 11:33:01:807 LL1 LogManager.java:25 look=[22, 39]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 4 in rule funcdclstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[22, 39]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 5 in rule funcdclstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[19, 19]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 6 in rule accfuncstm
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[22, 39]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 7 in rule parametros
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[45, 39]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 8 in rule parametroscall
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[45, 39]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 9 in rule ifstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[11, {<EOF>, 9..19, 22, 41}]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 10 in rule ifstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[11, {<EOF>, 9..10, 12..19, 22, 41}]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 11 in rule switchstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[14, {15, 41}]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 12 in rule switchstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[15, 41]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? true
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 13 in rule opasignstmt
2023-08-26 11:33:01:808 LL1 LogManager.java:25 look=[22, 22]
2023-08-26 11:33:01:808 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:808 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-08-26 11:33:01:809 LL1 LogManager.java:25 look=[38, 36, 20, 22, 21, {7..8}, 6, 22, 1, 2, 5, 22]
2023-08-26 11:33:01:809 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:809 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-08-26 11:33:01:809 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-26 11:33:01:809 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:809 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-08-26 11:33:01:809 LL1 LogManager.java:25 look=[null, null]
2023-08-26 11:33:01:809 LL1 LogManager.java:25 LL(1)? false
2023-08-26 11:33:01:840 action-translator LogManager.java:25 translate 
2023-08-26 11:33:01:841 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-26 11:33:01:842 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 11:33:01:842 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 11:33:01:842 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 11:33:01:843 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 11:33:01:843 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 11:33:01:843 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 11:33:01:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 11:33:02:244 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 11:33:02:248 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHARACTER (BLOCK (ALT 'character'))) (RULE PSTRING (BLOCK (ALT 'String'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE INTERROGACION (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
